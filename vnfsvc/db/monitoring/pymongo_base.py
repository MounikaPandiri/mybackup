# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
"""Common functions for MongoDB backend
"""
import pymongo

from vnfsvc.openstack.common.gettextutils import _
from vnfsvc.openstack.common import log
from vnfsvc.db.monitoring import base
from vnfsvc.db.monitoring.mongo import utils as pymongo_utils

LOG = log.getLogger(__name__)


COMMON_AVAILABLE_CAPABILITIES = {
}


AVAILABLE_STORAGE_CAPABILITIES = {
}


class Connection(base.Connection):
    """Base Connection class for MongoDB and DB2 drivers."""
    def get_samples(self, sample_filter, limit=None):
        if limit == 0:
           return []
        q = pymongo_utils.make_query_from_filter(sample_filter)

        return self._retrieve_samples(q,
                                  [("timestamp", pymongo.DESCENDING)],
                                  limit)

    def query_samples(self, filter_expr=None, orderby=None, limit=None):
        if limit == 0:
            return []
        query_filter = {}
        orderby_filter = [("timestamp", pymongo.DESCENDING)]
        transformer = pymongo_utils.QueryTransformer()
        if orderby is not None:
            orderby_filter = transformer.transform_orderby(orderby)
        if filter_expr is not None:
            query_filter = transformer.transform_filter(filter_expr)

        return self._retrieve_samples(query_filter, orderby_filter, limit)

    def _retrieve_samples(self, query, orderby, limit):
        if limit is not None:
            samples = self.db.nsdmetering.find(query,
                                         limit=limit,
                                         sort=orderby)
        else:
            samples = self.db.nsdmetering.find(query,
                                         sort=orderby)

        for s in samples:
            # Remove the ObjectId generated by the database when
            # the sample was inserted. It is an implementation
            # detail that should not leak outside of the driver.
            del s['_id']
            # Backward compatibility for samples without units
            # Tolerate absence of recorded_at in older datapoints
            yield s
